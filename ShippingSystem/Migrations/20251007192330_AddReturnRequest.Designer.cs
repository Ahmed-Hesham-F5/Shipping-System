// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShippingSystem.Data;

#nullable disable

namespace ShippingSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251007192330_AddReturnRequest")]
    partial class AddReturnRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Shipper",
                            NormalizedName = "SHIPPER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Courier",
                            NormalizedName = "COURIER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Storekeeper",
                            NormalizedName = "STOREKEEPER"
                        },
                        new
                        {
                            Id = "8",
                            Name = "TechnicalSupport",
                            NormalizedName = "TECHNICALSUPPORT"
                        },
                        new
                        {
                            Id = "16",
                            Name = "WarehouseManager",
                            NormalizedName = "WAREHOUSEMANAGER"
                        },
                        new
                        {
                            Id = "32",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = "64",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "128",
                            Name = "MainAdmin",
                            NormalizedName = "MAINADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<short>("AccountStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.PickupRequestShipment", b =>
                {
                    b.Property<int>("PickupRequestId")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.HasKey("PickupRequestId", "ShipmentId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("PickupRequestShipments", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.RefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ShippingSystem.Models.RequestBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("ShipmentsCount")
                        .HasColumnType("int");

                    b.Property<string>("ShipperId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShipperId");

                    b.ToTable("Requests", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ShippingSystem.Models.ReturnRequestShipment", b =>
                {
                    b.Property<int>("ReturnRequestId")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.HasKey("ReturnRequestId", "ShipmentId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ReturnRequestShipments", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdditionalWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AdditionalWeightCostPrtKg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("CashOnDeliveryEnabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("CollectionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CollectionFeePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CollectionFeeThreshold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerAdditionalPhone")
                        .HasMaxLength(11)
                        .HasColumnType("varchar");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar");

                    b.Property<bool>("ExpressDeliveryEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("OpenPackageOnDeliveryEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("ShipmentHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShipmentLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShipmentNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ShipmentTrackingNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("ShipmentWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShipmentWidth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShipperId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentTrackingNumber")
                        .IsUnique();

                    b.HasIndex("ShipperId");

                    b.ToTable("Shipments", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.ShipmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentStatuses", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.Shipper", b =>
                {
                    b.Property<string>("ShipperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyLink")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<string>("TypeOfProduction")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.HasKey("ShipperId");

                    b.ToTable("Shippers", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.ShipperAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ShipperId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("ShipperId");

                    b.ToTable("ShipperAddresses", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.ShipperPhone", b =>
                {
                    b.Property<string>("ShipperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("varchar");

                    b.HasKey("ShipperId", "PhoneNumber");

                    b.ToTable("ShipperPhones", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.ShippingSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("ShippingSettings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "AdditionalWeightCostPrtKg",
                            Value = "5"
                        },
                        new
                        {
                            Id = 2,
                            Key = "CollectionFeePercentage",
                            Value = "0.01"
                        },
                        new
                        {
                            Id = 3,
                            Key = "CollectionFeeThreshold",
                            Value = "3000"
                        });
                });

            modelBuilder.Entity("ShippingSystem.Models.PickupRequest", b =>
                {
                    b.HasBaseType("ShippingSystem.Models.RequestBase");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar");

                    b.Property<DateOnly>("PickupDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("WindowEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WindowStart")
                        .HasColumnType("time");

                    b.ToTable("PickupRequests", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.ReturnRequest", b =>
                {
                    b.HasBaseType("ShippingSystem.Models.RequestBase");

                    b.Property<string>("CustomerContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ReturnPickupDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("ReturnPickupWindowEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ReturnPickupWindowStart")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ReturnWindowEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ReturnWindowStart")
                        .HasColumnType("time");

                    b.Property<string>("ShipperContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipperContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ReturnRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ShippingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ShippingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ShippingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingSystem.Models.PickupRequestShipment", b =>
                {
                    b.HasOne("ShippingSystem.Models.PickupRequest", "PickupRequest")
                        .WithMany("PickupRequestShipments")
                        .HasForeignKey("PickupRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingSystem.Models.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PickupRequest");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("ShippingSystem.Models.RefreshToken", b =>
                {
                    b.HasOne("ShippingSystem.Models.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShippingSystem.Models.RequestBase", b =>
                {
                    b.HasOne("ShippingSystem.Models.Shipper", "Shipper")
                        .WithMany()
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("ShippingSystem.Models.ReturnRequestShipment", b =>
                {
                    b.HasOne("ShippingSystem.Models.ReturnRequest", "ReturnRequest")
                        .WithMany("ReturnRequestShipments")
                        .HasForeignKey("ReturnRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingSystem.Models.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReturnRequest");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("ShippingSystem.Models.Shipment", b =>
                {
                    b.HasOne("ShippingSystem.Models.Shipper", "Shipper")
                        .WithMany("Shipments")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ShippingSystem.Models.Address", "CustomerAddress", b1 =>
                        {
                            b1.Property<int>("ShipmentId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar");

                            b1.Property<string>("Details")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar");

                            b1.Property<string>("GoogleMapAddressLink")
                                .HasMaxLength(2083)
                                .HasColumnType("nvarchar");

                            b1.Property<string>("Governorate")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("Shipments");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });

                    b.Navigation("CustomerAddress")
                        .IsRequired();

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("ShippingSystem.Models.ShipmentStatus", b =>
                {
                    b.HasOne("ShippingSystem.Models.Shipment", "Shipment")
                        .WithMany("ShipmentStatuses")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("ShippingSystem.Models.Shipper", b =>
                {
                    b.HasOne("ShippingSystem.Models.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("ShippingSystem.Models.Shipper", "ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ShippingSystem.Models.ShipperAddress", b =>
                {
                    b.HasOne("ShippingSystem.Models.Shipper", "Shipper")
                        .WithMany("Addresses")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("ShippingSystem.Models.ShipperPhone", b =>
                {
                    b.HasOne("ShippingSystem.Models.Shipper", "Shipper")
                        .WithMany("Phones")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("ShippingSystem.Models.PickupRequest", b =>
                {
                    b.HasOne("ShippingSystem.Models.RequestBase", null)
                        .WithOne()
                        .HasForeignKey("ShippingSystem.Models.PickupRequest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ShippingSystem.Models.Address", "PickupAddress", b1 =>
                        {
                            b1.Property<int>("PickupRequestId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar");

                            b1.Property<string>("Details")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar");

                            b1.Property<string>("GoogleMapAddressLink")
                                .HasMaxLength(2083)
                                .HasColumnType("nvarchar");

                            b1.Property<string>("Governorate")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar");

                            b1.HasKey("PickupRequestId");

                            b1.ToTable("PickupRequests");

                            b1.WithOwner()
                                .HasForeignKey("PickupRequestId");
                        });

                    b.Navigation("PickupAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingSystem.Models.ReturnRequest", b =>
                {
                    b.HasOne("ShippingSystem.Models.RequestBase", null)
                        .WithOne()
                        .HasForeignKey("ShippingSystem.Models.ReturnRequest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ShippingSystem.Models.Address", "ReturnAddress", b1 =>
                        {
                            b1.Property<int>("ReturnRequestId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Details")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("GoogleMapAddressLink")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Governorate")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ReturnRequestId");

                            b1.ToTable("ReturnRequests");

                            b1.WithOwner()
                                .HasForeignKey("ReturnRequestId");
                        });

                    b.OwnsOne("ShippingSystem.Models.Address", "ReturnPickupAddress", b1 =>
                        {
                            b1.Property<int>("ReturnRequestId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Details")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("GoogleMapAddressLink")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Governorate")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ReturnRequestId");

                            b1.ToTable("ReturnRequests");

                            b1.WithOwner()
                                .HasForeignKey("ReturnRequestId");
                        });

                    b.Navigation("ReturnAddress")
                        .IsRequired();

                    b.Navigation("ReturnPickupAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("ShippingSystem.Models.Shipment", b =>
                {
                    b.Navigation("ShipmentStatuses");
                });

            modelBuilder.Entity("ShippingSystem.Models.Shipper", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Phones");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("ShippingSystem.Models.PickupRequest", b =>
                {
                    b.Navigation("PickupRequestShipments");
                });

            modelBuilder.Entity("ShippingSystem.Models.ReturnRequest", b =>
                {
                    b.Navigation("ReturnRequestShipments");
                });
#pragma warning restore 612, 618
        }
    }
}
